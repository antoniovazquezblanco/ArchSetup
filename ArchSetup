#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of ArchSetup.
#
# ArchSetup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ArchSetup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ArchSetup.  If not, see <http://www.gnu.org/licenses/>.

import logging
import os
from SetupTools.SetupConfig import SetupConfig
from Interface.Interface import Interface
from Interface.WelcomeWindow import WelcomeWindow
from Interface.KeyboardWindow import KeyboardWindow
from Interface.FontWindow import FontWindow
from Interface.FinishWindow import FinishWindow

class ArchSetup:
    def __init__(self):
        logging.basicConfig(filename='ArchSetup.log', level=logging.DEBUG)
        if os.getuid() != 0:
            logging.error("You need to be root to run ArchSetup...")
            print("You need to be root to run ArchSetup")
            return
        self.setupconfig = SetupConfig()
        self.interface = Interface(self.callback)
        self.interface.loop()

    def callback(self, event):
        if event == 'init':
            self.windows = []
            self.window_index = 0
            self.windows.append(WelcomeWindow(self.callback))
            self.windows.append(KeyboardWindow(self.callback, self.setupconfig))
            self.windows.append(FontWindow(self.callback, self.setupconfig))
            self.windows.append(FinishWindow(self.callback))
            self.interface.addwin(self.windows[self.window_index])
        elif event == 'prev':
            self.window_index = self.window_index - 1
            self.interface.addwin(self.windows[self.window_index])
        elif event == 'next':
            self.window_index = self.window_index + 1
            if self.window_index == len(self.windows):
                self.interface.exit()
                return
            self.interface.addwin(self.windows[self.window_index])

if __name__ == "__main__":
        ArchSetup()
