#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of ArchSetup.
#
# ArchSetup is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ArchSetup is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ArchSetup.  If not, see <http://www.gnu.org/licenses/>.

import logging
import os
from SetupTools.SetupConfig import SetupConfig
from Interface.Interface import Interface
from Interface.Windows.WelcomeWindow import WelcomeWindow
from Interface.Windows.KeyboardWindow import KeyboardWindow
from Interface.Windows.FontWindow import FontWindow
from Interface.Windows.TimezoneWindow import TimezoneWindow
from Interface.Windows.TimesubzoneWindow import TimesubzoneWindow
from Interface.Windows.FinishWindow import FinishWindow
from Interface.Windows.DiskWindow import DiskWindow
from Interface.Windows.HostnameWindow import HostnameWindow
from Interface.Windows.RootPassWindow import RootPassWindow
from Interface.Windows.AddUserWindow import AddUserWindow
from Interface.Windows.NetworkWindow import NetworkWindow
from Interface.Windows.SoftwareWindow import SoftwareWindow
from Interface.Windows.FilesystemWindow import FilesystemWindow
from Interface.Windows.LocaleWindow import LocaleWindow
from Interface.Windows.MainLocaleWindow import MainLocaleWindow
from Interface.Windows.DiskPartWindow import DiskPartWindow
from Interface.Windows.PreInstallWindow import PreInstallWindow
from Interface.Windows.InstallWindow import InstallWindow
from Interface.Windows.PostInstallWindow import PostInstallWindow

# Main program object. Initiates the needed objects to perform the setup tasks and also manages the basic interface initialization and handling.
class ArchSetup:
    def __init__(self):
        # Setup logging in case something goes wrong and the user needs to report a bug.
        logging.basicConfig(filename='ArchSetup.log', level=logging.DEBUG)
        # Verify that we have permissions to install...
        if os.getuid() != 0:
            logging.error("You need to be root to run ArchSetup...")
            print("You need to be root to run ArchSetup")
            return
        # Initialize the setup configuration object. It will hold the information of the current instalation.
        self.setupconfig = SetupConfig()
        # Initialize an interface manager. Pass a callback function to be notified of events.
        self.interface = Interface(self.callback)
        # Start the interface loop. It basically processes keyboard input and sends the relevant events to the callback and windows.
        self.interface.loop()

    # Function to process UI events
    def callback(self, event):
        # 'Init' event. Called after basic interface initialization and before loop. Mainly used to initialize stuff related to the user interface that depends on the screen information.
        if event == 'init':
            # List of the user interface windows.
            self.windows = []
            # Current selected window.
            self.window_index = 0
            # Add every window of the process in order...
            self.windows.append(WelcomeWindow(self.callback))
            self.windows.append(KeyboardWindow(self.callback, self.setupconfig))
            self.windows.append(FontWindow(self.callback, self.setupconfig))
            self.windows.append(NetworkWindow(self.callback, self.setupconfig))
            self.windows.append(LocaleWindow(self.callback, self.setupconfig))
            self.windows.append(MainLocaleWindow(self.callback, self.setupconfig))
            self.windows.append(DiskWindow(self.callback, self.setupconfig))
            self.windows.append(TimezoneWindow(self.callback, self.setupconfig))
            self.windows.append(TimesubzoneWindow(self.callback, self.setupconfig))
            self.windows.append(HostnameWindow(self.callback, self.setupconfig))
            self.windows.append(RootPassWindow(self.callback, self.setupconfig))
            self.windows.append(AddUserWindow(self.callback, self.setupconfig))
            self.windows.append(SoftwareWindow(self.callback, self.setupconfig))
            self.windows.append(FilesystemWindow(self.callback, self.setupconfig))
            self.windows.append(DiskPartWindow(self.callback, self.setupconfig))
            self.windows.append(PreInstallWindow(self.callback, self.setupconfig))
            self.windows.append(InstallWindow(self.callback, self.setupconfig))
            self.windows.append(PostInstallWindow(self.callback, self.setupconfig))
            self.windows.append(FinishWindow(self.callback))
            # Push the current window to the screen.
            self.interface.addwin(self.windows[self.window_index])
        # 'Previous' event. Signals that the user pressed the prev button.
        elif event == 'prev':
            # Show the previous window. For that update the window index and push it.
            self.window_index = self.window_index - 1
            self.interface.addwin(self.windows[self.window_index])
        # 'Next' event. Signals that the user pressed the next button.
        elif event == 'next':
            # Update windows index...
            self.window_index = self.window_index + 1
            # If no more windows are available just exit...
            if self.window_index == len(self.windows):
                self.interface.exit()
                return
            # Otherwise push the selected window...
            self.interface.addwin(self.windows[self.window_index])

# Program entry point
if __name__ == "__main__":
    ArchSetup()
